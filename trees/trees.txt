https://github.com/joinpursuit/Pursuit-Core-DSA/tree/master/lessons/Trees/web#breadth-first-searchtraversal-bfs

What is a tree?
abstract data type that simulates a hierarchical tree structure, with a root 
value and subtrees of children with a parent node, represented as a set of linked 
nodes
----------------------------------------------------------------------------------------------------------------------------------------------------
What can you use trees for?
    - Representing hierarchical relationships
    - Managing sorted data
    - Facilitating fast lookup operations

Types of Trees 
    - General Purpose Tree
    - Binary Tree
        * Binary Search Tree (a.k.a BST)
        * AVL tree (Self Balancing BST)
    - N-ary Tree

Components of a Tree 
    - Node (abstraction to hold some sort of value, allows the ability to chain or link together other Nodes[ADS = Abstract Data Structure])
    - Root (the first and topmost node in a tree is called the root; this Node has no parent or any previous node linking to it)
    - Parent / Child (whenever a Node has a link to other Nodes it creates a parent / child relationship; parent is the top Node that links to the new Nodes (child nodes).)
    - Leaf (any Node that does not contain any children Nodes; the end of the line for the tree for that particular branch.)
    - Edges (lines connecting the nodes)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
BINARY TREE 
    - a binary tree is a tree data structure in which each node has at most two children, 
    which are referred to as the left child and the right child

    ex. 2 -> 7 + 5
        [7 -> 2 + 6] [5 -> 9]
        [6 -> 5 + 11] [9 -> 4]

                2 
            7       5
        2   6           9
            5   11      4

How to implement a binary tree?
    - with connected nodes 
    - have a Tree and TreeNode classes, where TreeNode keeps track of the value, left and right properties and
        have a Tree class to have methods that operate on those nodes like insert(), find() remove() etc. This
        is similar to how we can have a LinkedList and Node classes or just Nodes when implementing Linked Lists. 

Node
    - To implement a Binary Tree Node we need a way to store a value and somehow a 
        reference or a pointer to a left and right children. So lets have a JavaScript 
        object that will represent a Tree Node with such properties and create a Class 
        to initialize such objects.

class TreeNode {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------
Exercise: Compare this to a Linked List implementation. What differences and similarities do you find?

Now, just with that we can already build our first tree, albeit very manually.

let a = new TreeNode("A");
let b = new TreeNode("B");
let c = new TreeNode("C");
let d = new TreeNode("D");
let e = new TreeNode("E");
let f = new TreeNode("F");
let g = new TreeNode("G");
let h = new TreeNode("H");
let i = new TreeNode("I");
let j = new TreeNode("J");
let k = new TreeNode("K");

a.left = b;
a.right = g;

b.left = c;
b.right = f;

c.left = d;
c.right = e;

g.left = h;
g.right = k;

h.left = i;
h.right = j;

// We could visualize the tree constructed as: 
//           (A)
//     (B)       (G)
//   (C) (F)  (H)   (K)
// (D)(E)   (I)(J)

    * What node do you think is the root? = A 

    * How many nodes are in the tree? = 11

    * How many levels does the tree have? = 4

    * Having access only to the root, is there a way to get to the node with value D? If so how? = console.log(a.left.left.left.value)

    * Having access only to the root, is there a way to get to the node with value J? How? = console.log(a.right.left.right.value)

----------------------------------------------------------------------------------------------------------------------------------------------------
Tree Traversal
    - What if we wanted to print all the nodes in a tree?
    - What if we want to search for a given value in the tree?
    - In what order should we visit the nodes?

There are two approaches to traverse/search a tree:
    - Depth First (goes deeper first; going vertical down)
    - Breadth First (goes wide first; horizontal left to right)

----------------------------------------------------------------------------------------------------------------------------------------------------
Breadth First Search/Traversal (BFS)
    (Level-Order traversal) -> Trees can be traversed in a breadth-first fashion, where we 
        visit every node on a level before going to a lower level. This search is referred 
        to as breadth-first search (BFS), as the search tree is broadened as much as possible 
        on each depth before going to the next depth.

                                F
                        B               G
                    A       D               I
                        C       E       H 

    Given the above tree if we traverse in level-order the order would be F, B, G, A, D, I, C, E, H.

Implementation
    - Level order will require the use of a Queue to aid us in visiting the nodes in a level-order fashion. 
        For simplicity and illustration purposes let us use an array as a queue (note that this is less than optimal).

const breadthFirst = (root) => {
    // Initialize the queue with the root node
    let queue = [ root ];

    // Continue running the algorithm while there are still nodes on the queue. As long a queue.length is truthy
    while (queue.length) {
        // Dequeue. Remove the front node in the queue. 
        let node = queue.shift();

        // The node we just removed is now "visited", so print it
        console.log(node.value);

        // Add/enqueue the left and right children to the back of the queue, if they exist.
        if (node.left) queue.push(node.left);
        if (node.right) queue.push(node.right);
    }
}

    - Write a function treeIncludes that searches a tree for a value and returns true or false depending on whether or not the value was found. Your function signature would be treeIncludes(root, value). Use any of the traversal algorithms.
    - Write a function treeToArrayInOrder that traverses a tree in-order a returns an array with its values.
    - What is the time complexity of these algorithms?

----------------------------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search Tree (BST)
    - A Binary Search Tree is a Binary Tree first and foremost. Its a tree that with one extra 
        constraint acquires a huge benefit. A BST is a tree in which each node has at most two children, 
        and additionally it satisfies the binary search property, which states that the value in each node 
        must be greater than or equal to any value stored in the left sub-tree, and less than or equal to 
        any value stored in the right sub-tree.

BST Conditions
    - Every node's value in the left subtree must be less than that node's parent value
    - Every node's value in the right subtree must be greater or equal to that node's parent value

[Typically, BSTs are defined to have unique values and when people talk about trees they are, more commonly, talking about Binary Search Trees.]

ex. [connect with arrows] 


                                            8
                                    3               10
                                1       6               14
                                    4       7       13
                                
non. ex. [connected with lines/no arrows]
                                                        100
                                                19              36
                                            17      3       25      1
                                        2       7           
*2 + 7 are connected to 17

How to Search a BST?
    - Well, with a Binary Search Algorithm applied to this Tree data structure.

const binarySearch = (root, value) => {
    // if the tree is empty, then the target val is not in the tree, so return false
    if (!root) return false;

    // otherwise the tree is not empty, so...
    if (value < root.value) {
        // if the target is less than the root,
        //  then search the left subtree
        return binarySearch(root.left, value);
    } else if (value > root.value){
        // if the target is greater than the root,
        //  then search the right subtree
        return binarySearch(root.right, value);
    } else {
        // otherwise, the target must be equal to the root
        // so return true since we found it!
        return true;
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------------------------------------

