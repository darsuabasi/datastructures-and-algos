A linked list is a data structure // a recursive data structure 
A node is the building block of a linked list [an abstract class that does two things: stores info and has reference for the next node]
- each element is a node



----------------------------------------------------------------------------------
class Node {
  constructor(value) {
    // We want to initialize a Node with a value
    this.value = value;
    // An independent node shouldn't point to anything by default
    this.next = null;
  }
}

[1, 3, 5, 7, 9]

each num = fixed size 
integer occupies 32 bits (1's + 0's)
javascript stores in 64 bits 

arr[n] = 1st ele address + ele size * index 


let node1 = new Node(1);
// 1 -> null
let node2 = new Node(2);
// 2 -> null
let node3 = new Node(3);
// 3 -> null


let node1 = new Node(1);
let node2 = new Node(2);
let node3 = new Node(3);

node1.next = node2; // 1 -> 2 -> null

node2.next = node3; // 1 -> 2 -> 3 -> null

* array [4 elements = 8 slots(4 slots for 4 elements + 4 empty slots)]

----------------------------------------------------------------------------------
Container Class
purpose of an Abstract Data Structure is to provide us with an interface.

We want our 'Linked List' class to be able to do the following:

Hold a reference to the beginning or 'Head' of the list
Be able to add onto the list new Nodes
Keep track of how many elements/nodes we have
Traverse and find elements/nodes in the list
Let's begin with defining our container class:

class LinkedList {

  constructor() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

}
----------------------------------------------------------------------------------
Essentially we want the container class to contain three properties: head, tail and length.

Head: This points to the first Node in the list at all times. Once we are connected to the first Node, you can find every subsequent Node.

Tail: This points to the last Node at all times. Allows us to push new Nodes to the end of the list in O(1) time.

Length: This will be a simple Number value to keep track of the number of Nodes in the list. Think of this as an accountant.

----------------------------------------------------------------------------------

Linked List Methods
push(value) : Add new element to the beginning of the list. While pushing everything down.

append(value) : Add new element to the end of the list. Keeping original order intact.

print() : Prints all the elements in the list sequentially.

get(index) : Returns value found at the passed index and undefined otherwise.

pop() : Removes the last element in the list and returns it.

----------------------------------------------------------------------------------
push(value)
Adding a value at the front of the list is known as a push operation. This is also known as a head-first insertion. Because we have a Head pointer at all times this is extremely simple!

push(value) {

  // Create a new node and assign value
  let newNode = new Node(value);

  // Assign the current head to come after the new Node
  newNode.next = this.head;

  // Assign the new Head to be the new Node you created
  this.head = newNode;

  // If there is no tail yet let's make new Node a tail.
  if (!this.tail) {
    this.tail = newNode;
  }

  this.length++;

}
----------------------------------------------------------------------------------
append(value)
The next operation weâ€™ll look at is append. This is meant to add a value to the end of the list. This is known as tail-end insertion. This is also pretty easy and straight forward because we have a Tail pointer!

append(value) {
 const newNode = new Node(value);

 // If there is no head yet let's make new node our head AND tail
 if (!this.head) {
   this.head = newNode;
   this.tail = newNode;
   return;
 }

 // Else continue ...

 // Attach new node to the end of linked list
 this.tail.next = newNode;
 // Then make that the new Tail
 this.tail = newNode;

 this.length++;
}
----------------------------------------------------------------------------------
print()
Let's say we want to print the list like the following:

1 -> 2 -> 3
What is our approach? We need to actually go through each Node one by one and print right? Correct. This is called traversal. Traversing through a linked list and other linked data structures is very important.

print() {
  // Lets create a string to add onto 
  let display = "";
  // We need a pointer variable that will start in the head and work its way down
  let pointer = this.head;
  
  // Keep traversing to the next as long as pointer isn't null
  while(pointer !== null) {
    // Update display string 
    display += pointer.value 
    if (pointer.next !== null) {
      display += " -> ";
    }
    // Update pointer to the next Node
    pointer = pointer.next;
  }
    
  // Display result
  console.log(display);    

}
----------------------------------------------------------------------------------
get(index)
It will be useful to be able to get any element by its index position.

Say we want the following list fruits:

// Apple -> Orange -> Lemon -> null

fruits.get(0); // Apple
fruits.get(2); // Lemon
How would we go on about doing this? We need to traverse through the list like the previous example, but this time we stop at a counter.

get(index) {
  let counter = 0;
  let pointer = this.head;

    if (index > this.length - 1) return
    while (counter < index) {
      pointer = pointer.next;
      counter++;
    }
  return pointer.value;
}
This is fairly similar to the previous traversal example. In this case we start with the 'Head', which happens to be 'Zero' index, then work our way down the nodes as long as the counter isn't matching the index we are searching for.

Finally, when we do arrive at the index, we return the Node to the user. Where they can easily access the value or any associated pointers.
----------------------------------------------------------------------------------
pop()
Finally, we have pop(). We want to be able to remove the last element of the list and get back that Node once the operation is done.

How would we approach this?

Check if the head is the tail. Why? That means there is only one Node in the list and we have both of our Head and Tail pointers to it.
If not, then we need to traverse down the list and be able to identify the last and second to last elements.
pop() {
  const deletedTail = this.tail;

  if (this.head === this.tail) {
    // There is only one node in linked list.
    this.head = null;
    this.tail = null;
    this.length--;
    return deletedTail.value;
  }

  // If there are many nodes in linked list...

  // Rewind to the last node and delete "next" link for the node before the last one.
  let currentNode = this.head;
  while (currentNode.next) {
    if (!currentNode.next.next) {
      currentNode.next = null;
    } else {
      currentNode = currentNode.next;
    }
  }

  this.tail = currentNode;

  this.length--;
  return deletedTail.value;
}
----------------------------------------------------------------------------------

Why use linked list?
- grow and shrink collection with ease
- space doesn't have to be continuous 

Tradeoff
- linked list doesnt have indicies (arr[i])

In C++, you need to provide a location in memory for each variable


when you push el to arr, that's constant time but some take o(n) ---> this is rare

----------------------------------------------------------------------------------
RAM = random access memory 
----------------------------------------------------------------------------------
8 gigs = 68B bits 